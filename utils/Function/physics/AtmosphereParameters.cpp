#include "AtmosphereParameters.hpp"
#include <cmath>

// массив высот для расчета молярной массы
static const double hgm[6] = { 
    120000.0,250000.0,400000.0,650000.0,900000.0,
    1050000.0 };
static const double b0[6] = { 
    46.9083,40.4668,6.3770,75.6896,112.4838,9.8970 };
static const double b1[6] = { 
    -29.71210e-05,-15.52722e-05,6.25497e-05,
    -17.61243e-05,-30.6808600e-05,-1.19732e-05 };
static const double b2[6] = { 
    12.08693e-10,  3.55735e-10, -1.10144e-10,
    1.33603e-10,  2.90329e-10,  7.78247e-12 };
static const double b3[6] = { 
    -1.85675e-15, -3.0234e-16,   3.36907e-17,
    -2.87884e-17, -9.20616e-17, -1.77541e-18 };
// массив геоптенциальных высот для температуры молярной
static const double hgp[12] = { 
    -2000.0,     0.0,  11000.0,  20000.0,
    32000.0, 47000.0,  51000.0,  71000.0,
    85000.0, 94000.0, 102450.0, 117777.0 };
// массив молярных температур
static const double tm[12] = { 
     301.15, 288.15, 216.65, 216.65,
    228.65, 270.65, 270.65, 214.65,
    186.65, 186.65, 212.00, 380.60 };
// массив градиентов молярных температур
static const double gmt[12] = { 
    0.0, -0.0065,-0.0065,    0.0, 0.0010,
    0.0028,   0.0,-0.0028,-0.0020,
    0.0, 0.0030, 0.0110 };
// массив слоев давлений
static const double pn[12] = { 
    1.27774e+05, 1.01325e+05, 2.26320e+04,
    5.47487e+03, 8.68014e+02, 1.10906e+02,
    6.69384e+01, 3.95639,     0.363379,
    0.06998,     0.016411,    0.016411 };
// массив геометрических высот для температуры кинетической
static const double hgmt[10] = { 
    120000.0, 140000.0, 160000.0, 200000.0,
    250000.0, 325000.0, 400000.0, 600000.0,
    800000.0, 1200000.0 };
// массив кинетических температур
static const double tk[10] = { 
    334.42, 559.60, 695.60, 854.40, 941.90,
    984.65, 995.90, 999.90,1000.0, 1000.0 };
// массив градиентов кинетических температур
static const double gkt[10] = { 
    0.011259, 0.006800, 0.003970, 0.001750,
    0.000570, 0.000150, 0.000020, 0.5e-07,
    0.0,      0.0 };

// массив геопотенциальных высот для давления
static const double hgmn[9] = { 
    120000.0, 150000.0, 200000.0, 250000.0,
    350000.0, 450000.0, 600000.0, 800000.0,
    1000000.0 };

/*
    Коэффициенты полинома для давления
*/

static const double a0[9] = { 
    0.20847853e+04, 0.10163937e+04,0.7631575e+03,
    0.1882203e+03, 0.2804823e+03, 0.5599362e+03,
    0.8358756e+03, 0.82490311e+02,0.383220e+02 };
static const double a1[9] = { 
     -0.5572031500e-01, -0.211953083e-01,
    -0.1150600844e-01, -0.2265999519e-02,
    -0.2432231125e-02, -0.3714141392e-02,
    -0.4265393073e-02, -0.311171020e-03,
    -0.509800e-04 };
static const double a2[9] = { 
    0.5611188100e-06, 0.1671627815e-06,
    0.6612598428e-07, 0.1041726141e-07,
    0.8055024663e-08, 0.9358870345e-08,
    0.8252842085e-08, 0.45185841e-09,
    0.18100e-10 };
static const double a3[9] = { 
    -0.252082260e-11,  -0.5894237068e-12,
    -0.1708736137e-12, -0.2155574922e-13,
    -0.1202418519e-13, -0.1058591881e-13,
    -0.7150127437e-14, -0.29608238e-15,    0.0 };
static const double a4[9] = { 
    0.4259522e-17,     0.7826684089e-18,
    0.1669823114e-18,  0.1687430962e-19,
    0.6805101379e-20,  0.4525531532e-20,
    0.2335744331e-20,  0.73448644e-22,     0.0 };
// показатель 
static const double m[9] = { 
    17.0, 16.0, 15.0, 15.0, 14.0, 13.0, 12.0,
    12.0, 11.0 };

static const double Mc=28.96442;    // кг/кмоль - молярная масса на уровне моря
static const double gc=9.80665;     // ускорение свободного падения на уровне моря
static const double r=6356767.0;    // условный радиус Земли
static const double na=602.257e+24; // число Авогадро
static const double rz=8314.32;     // Универсальная газовая постоянная
static const double rg=287.05287;   // удельная газовая постоянная

/// @brief Стандартные параметры атмосферы
/// @param h - геометрическая высота
/// @return Плотность, давление, темепературу, скорость звука
AtmosphereParameters StandartAtmosphereParameters::operator()(double h)
{
    AtmosphereParameters params;

    int i, j;
    double H; // геопотенциальная высота
    double Tmol, Tkin;
    double lg_p;
    double p_atm;

    // Молярная масса воздуха
    double Mm;
    if (h <= 94000) {
        Mm = Mc;
    } else if (h <= 97500) {
        Mm = 28.82+0.158*sqrt(1.0 - 7.5e-8*(h-94000.0)*(h-94000.0))-
            2.479e-4 * sqrt(97500.0-h);
    } else if (h <= 120000.0) {
        Mm = 28.850 - 0.0001511*(h-97500.0);
    } else if (h < 1050000.0) {
        i = 0;
        while(h >= hgm[i+1]) i++;
        Mm = b0[i] + b1[i]*h + b2[i]*h*h + b3[i]*h*h*h;
    } else {
        i = 5;
        Mm = b0[i] + b1[i]*h + b2[i]*h*h + b3[i]*h*h*h;
    }

    H = r*h/(h+r);  // расчет геопотенциальной высоты
    // Расчёт температуры и давления при высотах менее 120 км
    if(h < 120000.0) {
        // расчет молярной температуры
        j = 0;
        while(H >= hgp[j]) j++;
        Tmol = tm[j] + gmt[j]*(H - hgp[j]);
        // расчет кинетической температуры
        if(h < 94000.0) 
            Tkin = Tmol;
        else  
            Tkin = Tmol*Mm/Mc;
        // расчет давления
        if(gmt[j] == 0.0)
            lg_p = log10(pn[j])-0.434294*gc*(H-hgp[j])/rg/Tkin;
        else 
            lg_p = log10(pn[j])-gc*log10((tm[j] + gmt[j]*(H - hgp[j]))/tm[j])/rg/gmt[j];
        
        p_atm = exp(lg_p*log(10.0));
    }
    // расчет параметров для высот от 120 км до 1200 км
    else if (h <= 1200000) {
        // расчет кинетической температуры
        i = 0;
        while(h >= hgmt[i+1] && i < 0) i++;
        Tkin = tk[i] + gkt[i]*(h-hgmt[i]);
        // расчет концентрации частиц
        j = 0;
        while(h >= hgmn[j+1] && j < 8) j++;
        double h2 = h*h;
        double nn = a0[j]+a1[j]*h+a2[j]*h2+a3[j]*h*h2+a4[j]*h2*h2;
        // nx:=nn*pow(10.,m[j]);
        double nx = nn * exp(m[j]*log(10.0));
        // расчет давления атмосферы
        p_atm = nx*rz*Tkin/na;
    }
    // выше 1200 км - нет атмосферы
    else {
        Tkin  = 1000.0;
        p_atm = 0.0;
    }

    params.pressure = p_atm;
    params.temperature = Tkin;
    // расчет плотности
    params.density = p_atm*Mm/rz/Tkin;
    // расчет скорости звука
    params.soundSpeed = 20.046796 * sqrt(Tkin);

    return params;
}

StandartAtmosphereParameters::StandartAtmosphereParameters(){}
